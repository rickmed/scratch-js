import { Firestore } from "@google-cloud/firestore"

const db = new Firestore({
   projectId: "lofty-foundry-424913-q8",
   keyFilename: "./secrets/firestore-estate-certs.json",
   databaseId: "fellowmls-scraped-1",
})

const coll = db.collection("estates")

// const res = await coll.count().get()
// console.log(res.data())

/* Create a new doc with autogenerated id */
const now = Date.now()
const doc = await coll.add({
   first: "423",
   age: 45,
   yes: false
})
console.log(Date.now() - now)
console.log(doc.id)

// const namedDoc = coll.doc("rowID")

/* Create a new doc with the id specified in namedDoc */
// const now = Date.now()
// const doc = await namedDoc.set({
//    yes: "-yooo"
// })
// console.log(Date.now() - now)
// console.log(doc.writeTime)

/*  Merges data in dcoument with current values */
// const doc = await namedDoc.update({
//    third: "-yooo"
// })
// console.log(doc.writeTime)


// /* Get Documents based on filter */
// const res = await coll.where("age", "==", 45).get()
// const docs = res.docs.map(x => x.data())
// console.log(docs)
// const res = await namedDoc.get()
// console.log(res.data())


/* Atomic/Parallel operations */
// const now = Date.now()
// const batch = db.batch()
// batch.create(coll.doc(), {age: 45})
// batch.create(coll.doc(), {age: 45})
// batch.create(coll.doc(), {age: 45})
// await batch.commit()
// console.log(Date.now() - now)


/* Delete documents based on filter */
// const now = Date.now()
// const res = await coll.where("age", "==", 45).get()
// const batch = db.batch()
// for (const doc of res.docs) {
//    batch.delete(coll.doc(doc.id))
// }
// await batch.commit()
// console.log(Date.now() - now)


/* Bulk (parallel) operations
Seems this is only worth it for large number of operations
*/
// const bulkWrite = db.bulkWriter()
// const now = Date.now()
// bulkWrite.create(coll.doc(), {age: 45})
// bulkWrite.create(coll.doc(), {age: 45})
// bulkWrite.create(coll.doc(), {age: 45})
// await bulkWrite.close()
// console.log(Date.now() - now)


/* Manually */
// const proms = Array(13).fill({age: 45}).map((d: {age: number}) => coll.add(d))
// const now = Date.now()
// const res = await Promise.allSettled(proms)
// console.log(res)
// console.log(Date.now() - now)